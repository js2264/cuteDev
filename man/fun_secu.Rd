% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fun_secu.R
\name{fun_secu}
\alias{fun_secu}
\title{fun_secu}
\usage{
fun_secu(pos = 1, name = NULL)
}
\arguments{
\item{pos}{Single integer indicating the position of the environment checked (argument n of parent.frame()). Value 1 means one step above the fun_secu() local environment (by default). This means that when fun_secu(pos = 1) is used inside a function A, it checks if variables in the local environment of this function A are also present in above environments (following R Scope). When fun_secu(pos = 1) is used in the Global environment, it checks the objects of this environment.}

\item{name}{Single character string indicating the name of the function checked. If NULL, fun_secu() checks all the variables of the environment indicated by pos, as explained in the pos argument description. If non-null, fun_secu() checks all the variables present in the local env of the function will be checked in the above envs (which includes the working environment (Global env).}
}
\value{
A character string of the local variables that match variables in the different environments of the R scope, or NULL if no match.
}
\description{
Verify that variables in the environment defined by the pos parameter are not present in the above environment (following R Scope).

This can be used to avoid R scope preference of functions like get().
}
\details{
REQUIRED PACKAGES

None

REQUIRED FUNCTIONS FROM CUTE_LITTLE_R_FUNCTION

fun_check()
}
\examples{
fun_secu()
fun_secu(pos = 2)
mean <- 0 ; 
fun1 <- function(){sd <- 1 ; 
fun_secu(name = as.character(sys.calls()[[length(sys.calls())]]))} ; 
fun2 <- function(){cor <- 2 ; fun1()} ; fun1() ; fun2() ; 
rm(mean) 
# sys.calls() gives the function name at top stack of the imbricated functions, 
# sys.calls()[[length(sys.calls())]] the name of the just above function. 
# This can also been used for the above function: as.character(sys.call(1)).
test.pos <- 2 ; mean <- 0 ; 
fun1 <- function(){sd <- 1 ; 
fun_secu(pos = test.pos, 
name = if(length(sys.calls()) >= test.pos)
{as.character(sys.calls()[[length(sys.calls()) + 1 - test.pos]])}
else{search()[ (1:length(search()))[test.pos - length(sys.calls())]]})} ; 
fun2 <- function(){cor <- 2 ; fun1()} ; fun1() ; fun2() ; rm(mean) 
# for argument name, here is a way to have the name of the tested environment 
# according to test.pos value
}
